@page "/Browse"

@inject NavigationManager NavManager
@inject Group19LibraryApp.Data.LibraryData libData;
@using Group19LibraryApp.components
@using System.Collections;
@using Group19LibraryApp.Pages.Components;
@using System.Collections.Specialized;
@using System.Web;

    <section style="text-align:center;">
        <svg width="357" height="3" viewBox="0 0 357 3" fill="none" xmlns="http://www.w3.org/2000/svg">
            <line y1="1.5" x2="75" y2="1.5" stroke="#D1CFCF" stroke-width="3" />
            <line x1="93" y1="1.5" x2="168" y2="1.5" stroke="#D1CFCF" stroke-width="3" />
            <line x1="189" y1="1.5" x2="264" y2="1.5" stroke="#D1CFCF" stroke-width="3" />
            <line x1="282" y1="1.5" x2="357" y2="1.5" stroke="#D1CFCF" stroke-width="3" />
        </svg>
    </section>
    
    <!--Select type dropdown-->
    <div style="width:100%; display: flex; flex-direction: column">
        <div class="dropdownWrapper">
        <select @onchange="@typeChanged" class="dropdown large" selected=@selectedType>
                @foreach (String s in dict.Keys)
            {
                    <option value=@s>@s</option>

            }
        </select>
    </div>


    <!--Select category dropdown-->
    <div class ="dropdownWrapper">
        <select @onchange="@CategoryChanged" class="dropdown small" selected=@selectedCategory>
            @foreach (String s in dict[selectedType])
            {
                 <option value=@s>@s</option>
            }
        </select>
    </div>
</div>

<!--querried books-->
<div class=hidescroll style="height:100%; width:100%;position: relative;overflow-y:auto;overflow-x:hidden; margin-top: 5%">
    @for (int i = 0; i <= (int)fetchedBooks.Count() / 3; i++) {
        @for (int j = 0; j < Math.Min(fetchedBooks.Count() - (3 * i), 3); j++)
        {
            <div style="width:20%; height:22%; position: absolute; left: calc(10% + calc(30% * @j)); top: calc(30% * @i)">
                <BookCover info="@fetchedBooks[(3*i)+j]" />
            </div>
        }
    }
    <div style="width:100%; height: 300px;position:absolute; bottom:-300px;">

    </div>
</div>



@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    private string[] types = { "Textbook", "Book", "CD" };
    private List<LibraryItem> list = Group19LibraryApp.Data.LibraryData.books;
    private List<LibraryItem> fetchedBooks = new List<LibraryItem>();

    private Dictionary<String, String[]> dict = new Dictionary<String, String[]> {
        { "Textbook", new String[] { "REFRESH", "No category", "Biology", "Engineering", "CPSC" } },
        { "Book", new String[] { "REFRESH", "No category", "Comedy", "Sci-Fi", "Horror", "Adventure", "Fantasy" } },
        {"REFRESH", new String[] {"REFRESH"} } };

    private String selectedType = "Textbook";
    private String selectedCategory = "Biology";

    private void typeChanged(ChangeEventArgs e) {
        selectedType = e.Value.ToString();
        selectedCategory = dict[selectedType][0];
        fetchBooks();
        StateHasChanged();
    }

    private void CategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value.ToString();
        fetchBooks();
        StateHasChanged();
    }

    private void fetchBooks() {
        System.Diagnostics.Debug.WriteLine("Fetching books");
        fetchedBooks.Clear();
        StateHasChanged();
        foreach(LibraryItem item in list) {
            if (item.Type == selectedType && (item.Genre.Contains(selectedCategory) || selectedCategory == "No category") && item.Location[0] == Group19LibraryApp.Data.LibraryData.currentLocation)
            {
                System.Diagnostics.Debug.WriteLine("Found book " + item.Title);
                if (Group19LibraryApp.Data.LibraryData.studentBooks.ContainsKey(item.Title))
                {
                    fetchedBooks.Insert(0, item);
                } 
                else {
                    fetchedBooks.Add(item);
                }

            }
        }
        System.Diagnostics.Debug.WriteLine("Finished Fetching books. Found " + fetchedBooks.Count);
        foreach(LibraryItem item in fetchedBooks) {
            System.Diagnostics.Debug.WriteLine("\t" + item.Title);
        }
        return;
    }

    protected override void OnInitialized()
    {
        Layout.showMenu = true;
        Layout.showLocations = true;
        Layout.update();
        fetchBooks();
        Group19LibraryApp.Data.LibraryData.lastPage = "Browse";
        StateHasChanged();
    }   

}